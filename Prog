import numpy as np
import random


class Sudoku:

    def __init__(self):
        self.flag = 0
        self.foundArrays = []
        self.nemnullahely = []
        self.alaptabla = np.array([[0 for i in range(9)] for j in range(9)])
        self.board = np.array([[0 for i in range(9)] for j in range(9)])

    def lehetseges(self, b, sor, oszlop, szam):
        for i in range(9):
            if b[sor, i] == szam:
                return False
        for j in range(9):
            if b[j, oszlop] == szam:
                return False
        kezdosor = (sor // 3) * 3
        kezdooszlop = (oszlop // 3) * 3
        for i in range(3):
            for j in range(3):
                if b[(kezdosor + i), (kezdooszlop + j)] == szam:
                    return False
        return True

    def tablaGenerator(self, receivedTable):
        szamok = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        if self.flag == 0:
            for x in range(9):
                for y in range(9):
                    if receivedTable[x][y] == 0:
                        random.shuffle(szamok)
                        for szam in szamok:
                            if self.lehetseges(receivedTable, x, y, szam):
                                receivedTable[x][y] = szam
                                self.tablaGenerator(receivedTable)
                                receivedTable[x][y] = 0
                        return receivedTable
            self.flag = 1
            self.board = receivedTable.copy()
            self.alaptabla = receivedTable.copy()

    def megoldo(self, receivedTable):
        szamok = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        if self.flag == 0:
            for x in range(9):
                for y in range(9):
                    if receivedTable[x][y] == 0:
                        random.shuffle(szamok)
                        for szam in szamok:
                            if self.lehetseges(receivedTable, x, y, szam):
                                receivedTable[x][y] = szam
                                self.megoldo(receivedTable)
                                receivedTable[x][y] = 0
                        return receivedTable
            self.flag = 1
            self.board = receivedTable.copy()

    def nemnullaHely(self):
        for i in range(9):
            for j in range(9):
                if self.board[i][j] != 0:
                    self.nemnullahely.append([i, j])

    def feladvany(self):
        self.flag = 0
        while len(self.nemnullahely) != 30:
            ok = random.choice(self.nemnullahely)
            sor = ok[0]
            oszlop = ok[1]
            self.board[sor][oszlop] = 0
            self.foundArrays = []
            self.moreThanOneSolution(self.board.copy())
            if len(self.foundArrays) == 1:
                self.nemnullahely.remove(ok)
            else:
                self.board[sor][oszlop] = self.alaptabla[sor][oszlop]

        return self.board

    def moreThanOneSolution(self, receivedTable):
        szamok = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        for x in range(9):
            for y in range(9):
                if receivedTable[x][y] == 0:
                    random.shuffle(szamok)
                    for szam in szamok:
                        if self.lehetseges(receivedTable, x, y, szam):
                            receivedTable[x][y] = szam
                            self.moreThanOneSolution(receivedTable)
                            receivedTable[x][y] = 0
                    return receivedTable
        if 0 not in receivedTable:
            self.foundArrays.append(receivedTable)

    def szekv(self):
        self.tablaGenerator(self.alaptabla)
        self.nemnullaHely()
        self.feladvany()
        return self.board


egy = Sudoku()
egy.szekv()
print(egy.board)
